import os
import cv2
import random

# Define paths
input_path = r'./data'
output_path = r'./output'
os.makedirs(output_path, exist_ok=True)

# Initialize the face detection model
face_detection = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Function to classify face based on filename
def classify_face(filename):
    return 'real' if filename.startswith('P') else 'not real'

# Function to generate random healthcare metrics
def track_healthcare_metrics(face):
    heart_rate = random.randint(60, 100)  # Random heart rate between 60 and 100
    stress_level = random.randint(1, 10)  # Random stress level between 1 and 10
    return heart_rate, stress_level

# Initialize counters for evaluation metrics
TP = TN = FP = FN = 0

# Process each image in the input folder
for filename in os.listdir(input_path):
    if filename.endswith('.jpg'):
        img = cv2.imread(os.path.join(input_path, filename), cv2.IMREAD_GRAYSCALE)
        img = cv2.equalizeHist(img)

        faces = face_detection.detectMultiScale(img, scaleFactor=1.2, minNeighbors=4, minSize=(30, 30))
        classification = classify_face(filename)

        if len(faces) == 0:
            TN += (classification == 'not real')
            FN += (classification == 'real')
        else:
            for (x, y, w, h) in faces:
                cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 0), 2)
                heart_rate, stress_level = track_healthcare_metrics((x, y, w, h))
                print(f'Heart Rate: {heart_rate}, Stress Level: {stress_level}')
            TP += (classification == 'real')
            FP += (classification == 'not real')

            cv2.imwrite(os.path.join(output_path, filename), img)
            print(f'Saved {filename} with classification {classification}')

# Calculate total images and accuracy
total_images = TP + TN + FP + FN
accuracy = (TP + TN) / total_images * 100
print(f"TP: {TP}, TN: {TN}, FP: {FP}, FN: {FN}")
print(f"Accuracy: {accuracy:.2f}%")

# Calculate F1 Score
precision = TP / (TP + FP) if (TP + FP) > 0 else 0
recall = TP / (TP + FN) if (TP + FN) > 0 else 0
f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
print(f"F1 Score: {f1_score:.2f}")
